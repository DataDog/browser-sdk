import type { Vulnerability } from '@datadog/browser-core';
import { Observable, clocksNow } from '@datadog/browser-core';
import type { LifeCycle} from '../lifeCycle';
import { LifeCycleEventType} from '../lifeCycle';
import type { CustomAction } from '../action/actionCollection';
import type { CommonContext } from '../contexts/commonContext';
import { ActionType } from '../../rawRumEvent.types';
import { trackAutocomplete } from './trackAutocomplete';

export function startVulnerabilityCollection(
  lifeCycle: LifeCycle,
  addAction: (action: CustomAction, savedCommonContext?: CommonContext | undefined) => void,
  getCommonContext: () => CommonContext
) {

  // evidence location?? -> sourceMap?

  // autocompleteMissing
  // html resource integrity

  const vulnerabilityObservable = new Observable<Vulnerability>()

  trackAutocomplete(lifeCycle, vulnerabilityObservable)

  vulnerabilityObservable.subscribe((vulnerability) => lifeCycle.notify(LifeCycleEventType.VULNERABILITY_COLLECTED, { vulnerability }))

  return doStartVulnerabilityCollection(lifeCycle, addAction, getCommonContext)
}

export function doStartVulnerabilityCollection(
  lifeCycle: LifeCycle,
  addAction: (action: CustomAction, savedCommonContext?: CommonContext | undefined) => void,
  getCommonContext: () => CommonContext
) {
  lifeCycle.subscribe(LifeCycleEventType.VULNERABILITY_COLLECTED, ({ vulnerability }) => {
    const vulnerabilityContext = getCommonContext()
    vulnerabilityContext.context = {
      type: vulnerability.type,
      location: vulnerability.location.href,
    }

    addAction({
      type: ActionType.CUSTOM,
      name: 'vulnerability',
      startClocks: clocksNow(),
    }, vulnerabilityContext)
  })
}
