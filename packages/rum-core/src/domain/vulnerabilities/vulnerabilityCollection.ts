import type { Vulnerability } from '@datadog/browser-core';
import { Observable } from '@datadog/browser-core';
import type { RumConfiguration } from '../configuration'
import type { LifeCycle} from '../lifeCycle';
import { LifeCycleEventType} from '../lifeCycle';
import { trackAutocomplete } from './trackAutocomplete';

export function startVulnerabilityCollection(
  lifeCycle: LifeCycle,
  configuration: RumConfiguration
) {

  // evidence location?? -> sourceMap?

  // autocompleteMissing
  // html resource integrity

  const vulnerabilityObservable = new Observable<Vulnerability>()

  trackAutocomplete(lifeCycle, vulnerabilityObservable)

  vulnerabilityObservable.subscribe((vulnerability) => lifeCycle.notify(LifeCycleEventType.VULNERABILITY_COLLECTED, { vulnerability }))

  return doStartVulnerabilityCollection(lifeCycle)
}

export function doStartVulnerabilityCollection(
  lifeCycle: LifeCycle,
) {
  lifeCycle.subscribe(LifeCycleEventType.VULNERABILITY_COLLECTED, ({ vulnerability }) => {
    console.log(vulnerability)
  })
}
