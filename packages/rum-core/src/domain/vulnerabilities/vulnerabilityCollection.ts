import { Observable, clocksNow } from '@datadog/browser-core';
import type { Vulnerability, VulnerabilityType  } from '@datadog/browser-core';
import type { LifeCycle} from '../lifeCycle';
import { LifeCycleEventType} from '../lifeCycle';
import type { CustomAction } from '../action/actionCollection';
import type { CommonContext } from '../contexts/commonContext';
import { ActionType } from '../../rawRumEvent.types';
import { trackAutocomplete } from './trackAutocomplete';
import { trackSri } from './trackSri';

// vulnerability deduplication map. Is there some element identifier we could use instead HTMLElement?
const reportedMap = new WeakMap<HTMLElement, VulnerabilityType[]>()

export function startVulnerabilityCollection(
  lifeCycle: LifeCycle,
  addAction: (action: CustomAction, savedCommonContext?: CommonContext | undefined) => void,
  getCommonContext: () => CommonContext
) {
  const vulnerabilityObservable = new Observable<Vulnerability>()

  trackAutocomplete(lifeCycle, vulnerabilityObservable)
  trackSri(lifeCycle, vulnerabilityObservable)

  vulnerabilityObservable.subscribe((vulnerability) => lifeCycle.notify(LifeCycleEventType.VULNERABILITY_COLLECTED, { vulnerability }))

  return doStartVulnerabilityCollection(lifeCycle, addAction, getCommonContext)
}

export function doStartVulnerabilityCollection(
  lifeCycle: LifeCycle,
  addAction: (action: CustomAction, savedCommonContext?: CommonContext | undefined) => void,
  getCommonContext: () => CommonContext
) {
  lifeCycle.subscribe(LifeCycleEventType.VULNERABILITY_COLLECTED, ({ vulnerability }) => {

    if (!reported(vulnerability)) {
      const vulnerabilityContext = getVulnerabilityContext(vulnerability, getCommonContext)
      addAction({
        type: ActionType.CUSTOM,
        name: 'vulnerability',
        startClocks: clocksNow(),
      }, vulnerabilityContext)
    }
  })
}

function reported(vulnerability: Vulnerability) {
  const { element, type } = vulnerability

  let reportedVulnTypes = reportedMap.get(element)  
  if (reportedVulnTypes === undefined) {
    reportedVulnTypes = []
    reportedMap.set(element, reportedVulnTypes)
  } else if (reportedVulnTypes.includes(type)) {
    return true
  }

  reportedVulnTypes.push(type)

  return false
}

function getVulnerabilityContext(
  vulnerability: Vulnerability,
  getCommonContext: () => CommonContext
): CommonContext {
  const vulnerabilityContext = getCommonContext()

  const { type, element, location } = vulnerability
  vulnerabilityContext.context = {
    type,
    location: location.href,
    elementId: element.id,
    elementNodeName: element.nodeName
  }

  return vulnerabilityContext
}
