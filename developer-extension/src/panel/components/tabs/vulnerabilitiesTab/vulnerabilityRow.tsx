import { Table, Badge } from '@mantine/core'
import type { ComponentPropsWithoutRef, ReactNode } from 'react'
import React, { useRef, useState } from 'react'
import clsx from 'clsx'
import type { RumActionEvent } from '@datadog/browser-rum-core/src'
import type { SdkEvent } from '../../../sdkEvent'
import { formatDate, formatDuration } from '../../../formatNumber'
import { defaultFormatValue, Json } from '../../json'
import type { VulnerabilitiesListColumn } from './columnUtils'
import classes from './vulnerabilityRow.module.css'

const RUM_EVENT_TYPE_COLOR = {
  action: 'violet',
  error: 'red',
  long_task: 'yellow',
  view: 'blue',
  resource: 'cyan',
  telemetry: 'teal',
  vital: 'orange',
}

const LOG_STATUS_COLOR = {
  error: 'red',
  warn: 'yellow',
  info: 'blue',
  debug: 'cyan',
}

const RESOURCE_TYPE_LABELS: Record<string, string | undefined> = {
  xhr: 'XHR',
  fetch: 'Fetch',
  document: 'Document',
  beacon: 'Beacon',
  css: 'CSS',
  js: 'JS',
  image: 'Image',
  font: 'Font',
  media: 'Media',
  other: 'Other',
}

export const VulnerabilityRow = React.memo(
  ({
     vulnerability,
    columns
  }: {
    vulnerability: RumActionEvent|any
    columns: VulnerabilitiesListColumn[]
  }) => (
      <Table.Tr>
        {columns.map((column): React.ReactElement => {
          switch (column.type) {
            case 'date':
              return (
                <Cell key="date" noWrap>
                  {formatDate(vulnerability.date)}
                </Cell>
              )
            case 'type':
              return (
                <Cell key="type">
                    <Badge variant="outline" color="violet">
                      { `${vulnerability.context?.type  }`}
                    </Badge>
                </Cell>
              )
            case 'location':
              return (
                <Cell key="location" noWrap>
                  { `${vulnerability.context?.location  }`}
                </Cell>
              )
            case 'element':
              return (
                <Cell key="element" noWrap>
                  { `${vulnerability.context?.evidence  }`}
                </Cell>
              )
            case 'hash':
              return (
                <Cell key="date" noWrap>
                  { vulnerability.hash }
                </Cell>
              )
            case 'vulnerabilityType':
              return (
                <Cell key="vulnerability-type">
                  <Badge variant="outline" color="cyan">
                    { vulnerability.type }
                  </Badge>
                </Cell>
              )
            case 'vulnerabilityLocation':
              return (
                <Cell key="location" noWrap>
                  { vulnerability.location.path && (vulnerability.location.path + (vulnerability.location.line ? `:${vulnerability.location.line}` : '')) }
                </Cell>
              )
            case 'evidence':
              return (
                <Cell key="element" noWrap>
                  { vulnerability.evidence?.value || vulnerability.evidence?.valueParts?.map((vp: any) => {return (vp.value || vp.redacted)}).join('') || 'N/A' }
                </Cell>
              )
            case 'field': {
              const value = 'N/A'
              return (
                <Cell key={`field-${column.path}`}>
                  {value !== undefined && (
                    <Json
                      value={value}
                      defaultCollapseLevel={0}
                      formatValue={(path, value) => formatValue(path ? `${column.path}.${path}` : column.path, value)}
                    />
                  )}
                </Cell>
              )
            }
          }
        })}
      </Table.Tr>
    )
)

function Cell({
  children,
  className,
  onClick,
  noWrap,
}: {
  children: ReactNode
  className?: string
  onClick?: ComponentPropsWithoutRef<'td'>['onClick']
  noWrap?: boolean
}) {
  return (
    <Table.Td className={clsx(className, classes.cell)} data-no-wrap={noWrap || undefined} onClick={onClick}>
      {children}
    </Table.Td>
  )
}


function formatValue(path: string, value: unknown) {
  if (typeof value === 'number') {
    if (path === 'date') {
      return formatDate(value)
    }
    if (
      path.endsWith('.first_byte') ||
      path.endsWith('.dom_complete') ||
      path.endsWith('.dom_content_loaded') ||
      path.endsWith('.dom_interactive') ||
      path.endsWith('.first_contentful_paint') ||
      path.endsWith('.largest_contentful_paint') ||
      path.endsWith('.load_event') ||
      path.endsWith('.time_spent') ||
      path.endsWith('_time') ||
      path.endsWith('_delay') ||
      path.endsWith('.duration') ||
      path.endsWith('.start') ||
      path.includes('.custom_timings.')
    ) {
      return formatDuration(value)
    }
  }

  return defaultFormatValue(path, value)
}

export const VulnerabilityDescription = React.memo(({ vulnerability }: { vulnerability: SdkEvent }) => (
    <>
      <Emphasis>Vulnerability</Emphasis>
    </>
  ))

function Emphasis({ children }: { children: ReactNode }) {
  return <strong>{children}</strong>
}

function getViewName(view: { name?: string; url: string }) {
  return `${view.name || new URL(view.url).pathname}`
}
