variables:
  CURRENT_STAGING: staging-40
  APP: 'browser-sdk'
  CURRENT_CI_IMAGE: 25
  BUILD_STABLE_REGISTRY: '486234852809.dkr.ecr.us-east-1.amazonaws.com'
  CI_IMAGE: '$BUILD_STABLE_REGISTRY/ci/$APP:$CURRENT_CI_IMAGE'
  GIT_REPOSITORY: 'git@github.com:DataDog/browser-sdk.git'
  MAIN_BRANCH: 'main'

cache:
  key: dependencies
  paths:
    - node_modules/

stages:
  - task
  - ci-image
  - test
  - browserstack
  - pre-deploy
  - pre-deploy-notify
  - deploy:canary
  - notify:canary
  - deploy
  - notify

ci-image:
  stage: ci-image
  when: manual
  except:
    refs:
      - tags
      - schedules
  tags: ['runner:docker', 'size:large']
  image: $BUILD_STABLE_REGISTRY/docker:18.03.1
  script:
    - docker build --tag $CI_IMAGE .
    - docker push $CI_IMAGE

########################################################################################################################
# Tests
########################################################################################################################

format:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - yarn format

woke:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn woke

typecheck:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - yarn typecheck

build-and-lint:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - yarn build
    - yarn lint
    - scripts/cli typecheck test/app
    - scripts/cli typecheck test/e2e

build-bundle:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - yarn build:bundle

compatibility:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - yarn test:compat:tsc
    - yarn test:compat:ssr

unit:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  artifacts:
    reports:
      junit: test-report/unit/*.xml
  script:
    - yarn
    - yarn test:unit
    - ./scripts/codecov.sh

e2e:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  artifacts:
    when: always
    paths:
      - test-report/e2e/specs.log
    reports:
      junit: test-report/e2e/*.xml
  script:
    - yarn
    - yarn test:e2e

check-licenses:
  stage: test
  except:
    refs:
      - schedules
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - node --no-warnings scripts/check-licenses.js

unit-bs:
  stage: browserstack
  except:
    refs:
      - main
      - tags
      - /^staging-[0-9]+$/
      - schedules
  resource_group: browserstack
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  artifacts:
    reports:
      junit: test-report/unit-bs/*.xml
  script:
    - yarn
    - ./scripts/ci-bs.sh test:unit

e2e-bs:
  stage: browserstack
  except:
    refs:
      - main
      - tags
      - /^staging-[0-9]+$/
      - schedules
  resource_group: browserstack
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  artifacts:
    when: always
    reports:
      junit: test-report/e2e-bs/*.xml
    paths:
      - test-report/e2e-bs/specs.log
  script:
    - yarn
    - ./scripts/ci-bs.sh test:e2e

########################################################################################################################
# Deploy
########################################################################################################################

deploy-staging:
  only:
    refs:
      - $CURRENT_STAGING
  stage: deploy
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - BUILD_MODE=staging yarn build:bundle
    - ./scripts/deploy.sh staging head

deploy-prod-canary:
  only:
    refs:
      - tags
  stage: deploy:canary
  when: manual
  allow_failure: false
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - BUILD_MODE=release yarn build:bundle
    - ./scripts/deploy.sh prod canary

deploy-prod-stable:
  only:
    refs:
      - tags
  stage: deploy
  when: manual
  allow_failure: false
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  script:
    - yarn
    - BUILD_MODE=release yarn build:bundle
    - VERSION=$(node -p -e "require('./lerna.json').version")
    - ./scripts/deploy.sh prod v${VERSION%%.*}

########################################################################################################################
# Notify
########################################################################################################################

include: 'https://gitlab-templates.ddbuild.io/slack-notifier/v1/template.yml'

notify-feature-branch-failure:
  extends: .slack-notifier.on-failure
  except:
    refs:
      - main
      - tags
      - schedules

.prepare_notification:
  extends: .slack-notifier-base
  before_script:
    - COMMIT_MESSAGE=`git show-branch --no-name HEAD`
    - BUILD_URL="$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID"
    - COMMIT_URL="$CI_PROJECT_URL/commits/$CI_COMMIT_SHA"

notify-staging-success:
  extends: .prepare_notification
  only:
    refs:
      - $CURRENT_STAGING
  script:
    - 'MESSAGE_TEXT=":rocket: $CI_PROJECT_NAME <$COMMIT_URL|$COMMIT_MESSAGE> deployed to :datadog_staging:."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"
    - postmessage "#rum-ops-stg" "$MESSAGE_TEXT"

notify-staging-failure:
  extends: .prepare_notification
  when: on_failure
  only:
    refs:
      - $CURRENT_STAGING
  script:
    - 'MESSAGE_TEXT=":host-red: $CI_PROJECT_NAME main pipeline for <$BUILD_URL|$COMMIT_MESSAGE> failed."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"

notify-release-ready:
  extends: .prepare_notification
  stage: pre-deploy-notify
  only:
    refs:
      - tags
  script:
    - 'MESSAGE_TEXT=":i: $CI_PROJECT_NAME <$BUILD_URL|$COMMIT_MESSAGE> ready to be deployed to :datadog:"'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"

notify-prod-canary-success:
  extends: .prepare_notification
  stage: notify:canary
  only:
    refs:
      - tags
  script:
    - 'MESSAGE_TEXT=":rocket: $CI_PROJECT_NAME <$COMMIT_URL|$COMMIT_MESSAGE> deployed to :datadog:."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"
    - postmessage "#rum-ops" "$MESSAGE_TEXT"

notify-prod-canary-failure:
  extends: .prepare_notification
  stage: notify:canary
  when: on_failure
  only:
    refs:
      - tags
  script:
    - 'MESSAGE_TEXT=":host-red: $CI_PROJECT_NAME release pipeline <$BUILD_URL|$COMMIT_MESSAGE> failed."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"

notify-prod-stable-success:
  extends: .prepare_notification
  only:
    refs:
      - tags
  script:
    - 'MESSAGE_TEXT=":rocket: $CI_PROJECT_NAME <$COMMIT_URL|$COMMIT_MESSAGE> deployed to :earth_americas:."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"
    - postmessage "#rum-ops" "$MESSAGE_TEXT"

notify-prod-stable-failure:
  extends: .prepare_notification
  when: on_failure
  only:
    refs:
      - tags
  script:
    - 'MESSAGE_TEXT=":host-red: $CI_PROJECT_NAME release pipeline <$BUILD_URL|$COMMIT_MESSAGE> failed."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"

########################################################################################################################
# To staging CI
########################################################################################################################

staging-reset-scheduled:
  stage: task
  only:
    variables:
      - $TARGET_TASK_NAME == "staging-reset-scheduled"
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  before_script:
    - eval $(ssh-agent -s)
  script:
    - node scripts/staging-ci/staging-reset.js
  artifacts:
    reports:
      dotenv: build.env

staging-reset-scheduled-success:
  extends: .prepare_notification
  only:
    variables:
      - $TARGET_TASK_NAME == "staging-reset-scheduled"
  script:
    - 'MESSAGE_TEXT=":white_check_mark: [*$CI_PROJECT_NAME*] Staging has been reset from *${CURRENT_STAGING}* to *${NEW_STAGING}* on pipeline <$BUILD_URL|$COMMIT_MESSAGE>."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"
  dependencies:
    - staging-reset-scheduled

staging-reset-scheduled-failure:
  extends: .prepare_notification
  when: on_failure
  only:
    variables:
      - $TARGET_TASK_NAME == "staging-reset-scheduled"
  script:
    - 'MESSAGE_TEXT=":x: [*$CI_PROJECT_NAME*] Staging failed to reset from *${CURRENT_STAGING}* to *${NEW_STAGING}* on pipeline <$BUILD_URL|$COMMIT_MESSAGE>."'
    - postmessage "#rum-deploy" "$MESSAGE_TEXT"
  dependencies:
    - staging-reset-scheduled

merge-into-staging:
  stage: pre-deploy
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE
  only:
    refs:
      - main
  except:
    refs:
      - schedules
  before_script:
    - eval $(ssh-agent -s)
  script:
    - node scripts/staging-ci/merge-into-staging.js
