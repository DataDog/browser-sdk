variables:
  CURRENT_STAGING: staging-35
  APP: 'browser-sdk'
  CURRENT_CI_IMAGE: 51
  BUILD_STABLE_REGISTRY: '486234852809.dkr.ecr.us-east-1.amazonaws.com'
  CI_IMAGE: '$BUILD_STABLE_REGISTRY/ci/$APP:$CURRENT_CI_IMAGE'
  GIT_REPOSITORY: 'git@github.com:DataDog/browser-sdk.git'
  MAIN_BRANCH: 'main'
  CHROME_PACKAGE_VERSION: 116.0.5845.110-1

cache:
  key:
    files:
      - yarn.lock
  paths:
    - .yarn/cache

stages:
  - task
  - ci-image
  - test
  - after-tests
  - browserstack
  - pre-deploy
  - pre-deploy-notify
  - deploy:canary
  - notify:canary
  - deploy
  - notify

.base-configuration:
  tags: ['runner:main', 'size:large']
  image: $CI_IMAGE

########################################################################################################################
# Branch selection helpers
########################################################################################################################

.test-allowed-branches:
  except:
    refs:
      - /^release\//
      - schedules

.bs-allowed-branches:
  except:
    refs:
      - main
      - /^mq-working-branch-staging-[0-9]+-[a-z0-9]+$/
      - /^staging-[0-9]+$/
      - /^release\//
      - schedules

.feature-branches:
  except:
    refs:
      - main
      - tags
      - /^staging-[0-9]+$/
      - /^release\//
      - schedules

.staging:
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $CURRENT_STAGING

.main:
  only:
    refs:
      - main
  except:
    refs:
      - schedules
    variables:
      - $CI_COMMIT_TITLE =~ /^v[0-9.]+/

.tags:
  only:
    refs:
      - tags

########################################################################################################################
# CI image
########################################################################################################################

ci-image:
  stage: ci-image
  extends:
    - .base-configuration
    - .feature-branches
  when: manual
  tags: ['runner:docker', 'size:large']
  image: $BUILD_STABLE_REGISTRY/docker:18.03.1
  script:
    - docker build --build-arg CHROME_PACKAGE_VERSION=$CHROME_PACKAGE_VERSION --tag $CI_IMAGE .
    - docker push $CI_IMAGE

########################################################################################################################
# Tests
########################################################################################################################

format:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - yarn format

woke:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - yarn woke

typecheck:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - yarn build
    - yarn typecheck
    - scripts/cli typecheck test/app
    - scripts/cli typecheck test/e2e

build-and-lint:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - yarn build
    - yarn lint
    - node scripts/check-packages.js

build-bundle:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - yarn build:bundle

compatibility:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - yarn test:compat:tsc
    - yarn test:compat:ssr

unit:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  artifacts:
    reports:
      junit: test-report/unit/*.xml
  script:
    - yarn
    - yarn test:unit
    - ./scripts/test/codecov.sh
  after_script:
    - node ./scripts/test/export-test-result.js unit

e2e:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  artifacts:
    when: always
    paths: ['test-report/e2e/specs.log']
    reports:
      junit: test-report/e2e/*.xml
  script:
    - yarn
    - yarn test:e2e
  after_script:
    - node ./scripts/test/export-test-result.js e2e

check-licenses:
  extends:
    - .base-configuration
    - .test-allowed-branches
  interruptible: true
  script:
    - yarn
    - node --no-warnings scripts/check-licenses.js

check-release:
  extends:
    - .base-configuration
    - .tags
  interruptible: true
  script:
    - yarn
    - BUILD_MODE=release yarn build
    - node scripts/release/check-release.js

unit-bs:
  stage: browserstack
  extends:
    - .base-configuration
    - .bs-allowed-branches
  interruptible: true
  resource_group: browserstack
  artifacts:
    reports:
      junit: test-report/unit-bs/*.xml
  script:
    - yarn
    - ./scripts/test/ci-bs.sh test:unit
  after_script:
    - node ./scripts/test/export-test-result.js unit-bs

e2e-bs:
  stage: browserstack
  extends:
    - .base-configuration
    - .bs-allowed-branches
  interruptible: true
  resource_group: browserstack
  artifacts:
    when: always
    paths: ['test-report/e2e-bs/specs.log']
    reports:
      junit: test-report/e2e-bs/*.xml
  script:
    - yarn
    - ./scripts/test/ci-bs.sh test:e2e
  after_script:
    - node ./scripts/test/export-test-result.js e2e-bs

########################################################################################################################
# Deploy
########################################################################################################################

deploy-feature:
  stage: deploy
  when: manual
  variables:
    SUFFIX: 'my-feature' #/datadog-[product]-${SUFFIX}.js
  extends:
    - .base-configuration
    - .feature-branches
  script:
    - export BUILD_MODE=canary
    - yarn
    - yarn build:bundle
    - node ./scripts/deploy/deploy.js staging $SUFFIX root

deploy-staging:
  stage: deploy
  extends:
    - .base-configuration
    - .staging
  script:
    - export BUILD_MODE=canary
    - yarn
    - yarn build:bundle
    - node ./scripts/deploy/deploy.js staging staging root
    - node ./scripts/deploy/upload-source-maps.js staging root

deploy-prod-canary:
  stage: deploy:canary
  extends:
    - .base-configuration
    - .main
  script:
    - export BUILD_MODE=canary
    - yarn
    - yarn build:bundle
    - node ./scripts/deploy/deploy.js prod canary root
    - node ./scripts/deploy/upload-source-maps.js canary root

.deploy-prod:
  stage: deploy
  extends:
    - .base-configuration
    - .tags
  when: manual
  allow_failure: false
  script:
    - export BUILD_MODE=release
    - VERSION=$(node -p -e "require('./lerna.json').version")
    - yarn
    - yarn build:bundle
    - node ./scripts/deploy/deploy.js prod v${VERSION%%.*} $UPLOAD_PATH
    - node ./scripts/deploy/upload-source-maps.js v${VERSION%%.*} $UPLOAD_PATH

step-1_deploy-prod-minor-dcs:
  extends:
    - .deploy-prod
  variables:
    UPLOAD_PATH: eu1,us3,us5,ap1

step-2_deploy-prod-us1:
  extends:
    - .deploy-prod
  variables:
    UPLOAD_PATH: us1

step-3_deploy-prod-root:
  extends:
    - .deploy-prod
  variables:
    UPLOAD_PATH: root

step-4_publish-npm:
  stage: deploy
  extends:
    - .base-configuration
    - .tags
  when: manual
  allow_failure: false
  script:
    - yarn
    - ./scripts/deploy/publish-npm.sh

########################################################################################################################
# Notify
########################################################################################################################

include: 'https://gitlab-templates.ddbuild.io/slack-notifier/v1/template.yml'

notify-feature-branch-failure:
  extends:
    - .slack-notifier.on-failure
    - .feature-branches

.prepare_notification:
  extends: .slack-notifier-base
  before_script:
    - COMMIT_MESSAGE=`git show-branch --no-name HEAD`
    - BUILD_URL="$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID"
    - COMMIT_URL="$CI_PROJECT_URL/commits/$CI_COMMIT_SHA"

notify-staging-failure:
  extends:
    - .prepare_notification
    - .staging
  when: on_failure
  script:
    - 'MESSAGE_TEXT=":host-red: $CI_PROJECT_NAME main pipeline for <$BUILD_URL|$COMMIT_MESSAGE> failed."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"

notify-release-ready:
  stage: pre-deploy-notify
  extends:
    - .prepare_notification
    - .tags
  script:
    - 'MESSAGE_TEXT=":i: $CI_PROJECT_NAME <$BUILD_URL|$COMMIT_MESSAGE> ready to be deployed to :datadog:"'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"

notify-prod-canary-success:
  stage: notify:canary
  extends:
    - .prepare_notification
    - .main
  script:
    - 'MESSAGE_TEXT=":rocket: $CI_PROJECT_NAME <$COMMIT_URL|$COMMIT_MESSAGE> deployed to :datadog:."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"
    - postmessage "#rum-browser-sdk-ops" "$MESSAGE_TEXT"

notify-prod-canary-failure:
  stage: notify:canary
  extends:
    - .prepare_notification
    - .main
  when: on_failure
  script:
    - 'MESSAGE_TEXT=":host-red: $CI_PROJECT_NAME release pipeline <$BUILD_URL|$COMMIT_MESSAGE> failed."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"

notify-prod-stable-success:
  extends:
    - .prepare_notification
    - .tags
  script:
    - 'MESSAGE_TEXT=":rocket: $CI_PROJECT_NAME <$COMMIT_URL|$COMMIT_MESSAGE> deployed to :earth_americas:."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"
    - postmessage "#rum-browser-sdk-ops" "$MESSAGE_TEXT"

notify-prod-stable-failure:
  extends:
    - .prepare_notification
    - .tags
  when: on_failure
  script:
    - 'MESSAGE_TEXT=":host-red: $CI_PROJECT_NAME release pipeline <$BUILD_URL|$COMMIT_MESSAGE> failed."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"

########################################################################################################################
# To staging CI
########################################################################################################################

staging-reset-scheduled:
  stage: task
  extends: .base-configuration
  only:
    variables:
      - $TARGET_TASK_NAME == "staging-reset-scheduled"
  before_script:
    - eval $(ssh-agent -s)
  script:
    - yarn
    - node scripts/staging-ci/staging-reset.js
  artifacts:
    reports:
      dotenv: build.env

staging-reset-scheduled-success:
  extends: .prepare_notification
  only:
    variables:
      - $TARGET_TASK_NAME == "staging-reset-scheduled"
  script:
    - 'MESSAGE_TEXT=":white_check_mark: [*$CI_PROJECT_NAME*] Staging has been reset from *${CURRENT_STAGING}* to *${NEW_STAGING}* on pipeline <$BUILD_URL|$COMMIT_MESSAGE>."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"
  dependencies:
    - staging-reset-scheduled

staging-reset-scheduled-failure:
  extends: .prepare_notification
  only:
    variables:
      - $TARGET_TASK_NAME == "staging-reset-scheduled"
  when: on_failure
  script:
    - 'MESSAGE_TEXT=":x: [*$CI_PROJECT_NAME*] Staging failed to reset from *${CURRENT_STAGING}* to *${NEW_STAGING}* on pipeline <$BUILD_URL|$COMMIT_MESSAGE>."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"
  dependencies:
    - staging-reset-scheduled

merge-into-staging:
  stage: pre-deploy
  extends:
    - .base-configuration
    - .main
  before_script:
    - eval $(ssh-agent -s)
  script:
    - yarn
    - node scripts/staging-ci/merge-into-staging.js

check-staging-merge:
  stage: test
  extends:
    - .base-configuration
    - .feature-branches
  interruptible: true
  before_script:
    - eval $(ssh-agent -s)
  script:
    - yarn
    - node scripts/staging-ci/check-staging-merge.js

# A noop job that's used to signal to `to-staging` that it can merge to the
# staging branch, even though the pipeline is still running
tests-passed:
  stage: after-tests
  extends:
    - .base-configuration
    - .feature-branches
  interruptible: true
  script:
    - 'true'

# in after-tests to not block `to-staging` merge
check-squash-into-staging:
  stage: after-tests
  allow_failure: true
  extends:
    - .base-configuration
    - .feature-branches
  interruptible: true
  before_script:
    - eval $(ssh-agent -s)
  script:
    - yarn
    - node scripts/staging-ci/check-squash-into-staging.js

########################################################################################################################
# Bump e2e chrome version
########################################################################################################################

bump-chrome-version-scheduled:
  stage: task
  extends: .base-configuration
  only:
    variables:
      - $TARGET_TASK_NAME == "bump-chrome-version-scheduled"
  before_script:
    - eval $(ssh-agent -s)
  script:
    - yarn
    - node scripts/test/bump-chrome-version.js
  artifacts:
    reports:
      dotenv: build.env

bump-chrome-version-scheduled-success:
  extends: .prepare_notification
  only:
    variables:
      - $TARGET_TASK_NAME == "bump-chrome-version-scheduled"
  before_script:
    - '[ -z "$BUMP_CHROME_PULL_REQUEST_URL" ] && exit'
  script:
    - 'MESSAGE_TEXT=":chrome: [*$CI_PROJECT_NAME*] New Chrome version available on <$BUMP_CHROME_PULL_REQUEST_URL|PR>."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"
  dependencies:
    - bump-chrome-version-scheduled

bump-chrome-version-scheduled-failure:
  extends: .prepare_notification
  only:
    variables:
      - $TARGET_TASK_NAME == "bump-chrome-version-scheduled"
  when: on_failure
  script:
    - 'MESSAGE_TEXT=":x: [*$CI_PROJECT_NAME*] Chrome version bumped failed on pipeline <$BUILD_URL|$COMMIT_MESSAGE>."'
    - postmessage "#browser-sdk-deploy" "$MESSAGE_TEXT"
  dependencies:
    - bump-chrome-version-scheduled
