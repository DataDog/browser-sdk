#!/bin/bash

set -euo pipefail

PATH="$PATH:node_modules/.bin"

main () {
  if [[ $# -lt 1 ]]; then
    cmd_help
  fi

  local command="cmd_$1"
  shift

  "$command" "$@"
}

cmd_help () {
  local available_commands=$(set | perl -nle'print $& while m{^cmd_\K\w+}g')
  echo -e "Available commands:\n$available_commands"
  exit 1
}

cmd_typecheck () {
  local project_path="${1}"
  tsc -p "$project_path" --noEmit true
}

cmd_lint () {
  local project_path="${1}"
  eslint "$project_path"
}

cmd_init_submodule () {
  git submodule update --init
}

cmd_update_submodule () {
  git submodule update --init
  git submodule update --remote
}

# needed because using fork instead of the npm package
# TODO remove me when json-schema-to-typescript natively supports readOnly
cmd_build_json2type () {
  cd ./node_modules/json-schema-to-typescript
  rm -rf dist
  # due to installation on node_modules, some of these steps can fail
  # built version still behaves correctly though
  set +e
  npm i
  npm run clean

  # With yarn 3, the 'test/' folder is not present, so all built files are put directly in the
  # 'dist/' folder instead of 'dist/src/'.
  #
  # Using an explicit '--rootDir' fixes this issue.
  npm exec -- tsc --declaration --rootDir .

  set -e
}

cmd_build_extensions () {
  echo "Building extensions with different configurations..."
  
  # Base extension directory
  local base_ext_dir="test/apps/extensions/extension"
  local default_ext_dir="test/apps/extensions/extension-default"
  local chrome_ext_dir="test/apps/extensions/extension-chrome"
  local example_ext_dir="test/apps/extensions/extension-example"
  
  # Clean up existing extension directories
  rm -rf "$default_ext_dir" "$chrome_ext_dir" "$example_ext_dir"
  
  # 1. Create and build default extension (no parameter replacement)
  echo "Creating default extension..."
  cp -r "$base_ext_dir" "$default_ext_dir"
  # Build the default extension
  echo "Building default extension..."
  cd "$default_ext_dir" && yarn install --no-immutable && yarn build && cd - > /dev/null
  
  # 2. Create and build extension with chrome-extension allowedTrackingOrigins
  echo "Creating chrome-extension extension..."
  cp -r "$base_ext_dir" "$chrome_ext_dir"
  # Add the chrome extension parameter
  sed -i.bak 's|/\* EXTENSION_INIT_PARAMETER \*/|allowedTrackingOrigins: ["chrome-extension://abcdefghijklmno"],|' "$chrome_ext_dir/src/contentScript.js"
  rm -f "$chrome_ext_dir/src/contentScript.js.bak"
  # Build the chrome extension
  echo "Building chrome-extension extension..."
  cd "$chrome_ext_dir" && yarn install --no-immutable && yarn build && cd - > /dev/null
  
  # 3. Create and build extension with app.example.com allowedTrackingOrigins
  echo "Creating app.example.com extension..."
  cp -r "$base_ext_dir" "$example_ext_dir"
  # Add the example site parameter
  sed -i.bak 's|/\* EXTENSION_INIT_PARAMETER \*/|allowedTrackingOrigins: ["https://app.example.com"],|' "$example_ext_dir/src/contentScript.js"
  rm -f "$example_ext_dir/src/contentScript.js.bak"
  # Build the example extension
  echo "Building app.example.com extension..."
  cd "$example_ext_dir" && yarn install --no-immutable && yarn build && cd - > /dev/null
  
  echo "Extension builds completed successfully."
  echo "Available extensions:"
  echo "  - Default: $default_ext_dir"
  echo "  - Chrome Extension: $chrome_ext_dir"
  echo "  - Example App: $example_ext_dir"
}

cmd_release () {
  [[ `git branch --show-current` != "main" ]] || fail 'please do not release from `main` branch'
  # We should publish all packages regardless of if there are changes in each.
  # --force-publish will skip the `lerna changed` check for changed packages
  # https://github.com/lerna/lerna/tree/main/libs/commands/version#--force-publish
  yarn lerna version --exact --force-publish
}

cmd_version () {
  node ./scripts/release/generate-changelog
  node ./scripts/release/update-peer-dependency-versions.js
  lerna run pack --stream
  # keep test apps lockfiles up to date
  for app_dir in test/apps/*; do
    cd "$app_dir"
    yarn up
    git add yarn.lock
    cd - > /dev/null
  done
}

cmd_woke () {
  command -v woke || fail 'woke not installed, see https://github.com/get-woke/woke#installation'
  woke --exit-1-on-failure
}

cmd_check_server_side_rendering_compatibility () {
  yarn build
  yarn lerna run pack --stream
  cd test/apps/vanilla
  rm -rf node_modules
  yarn install --no-immutable
  yarn compat:ssr || fail 'server side rendering compatibility broken'
}

fail () {
  echo
  echo "‚ùå ${1}"
  echo

  exit 1
}

main "$@"
