#!/bin/bash

set -euo pipefail

PATH="$PATH:$(yarn bin)"

main () {
  if [[ $# -lt 1 ]]; then
    cmd_help
  fi

  local command="cmd_$1"
  shift

  "$command" "$@"
}

cmd_help () {
  local available_commands=$(set | perl -nle'print $& while m{^cmd_\K\w+}g')
  echo -e "Available commands:\n$available_commands"
  exit 1
}

cmd_typecheck () {
  local project_path="${1}"
  tsc -p "$project_path" --noEmit true
}

cmd_lint () {
  local project_path="${1}"
  eslint "$project_path"
}

cmd_init_submodule () {
  git submodule update --init
}

cmd_update_submodule () {
  git submodule update --init
  git submodule update --remote
}

# needed because using fork instead of the npm package
# TODO remove me when json-schema-to-typescript natively supports readOnly
cmd_build_json2type () {
  cd ./node_modules/json-schema-to-typescript
  rm -rf dist
  # due to installation on node_modules, some of these steps can fail
  # built version still behaves correctly though
  set +e
  npm i
  npm run clean
  npm run build:server
  set -e
}

cmd_release () {
  [[ `git branch --show-current` != "main" ]] || fail 'please do not release from `main` branch'
  yarn lerna version --exact
}

cmd_version () {
  node ./scripts/release/generate-changelog.js
  node ./scripts/release/update-peer-dependency-versions.js
  # keep test app lockfile up to date
  cd test/app
  yarn upgrade
  git add yarn.lock
}

cmd_woke () {
  command -v woke || fail 'woke not installed, see https://github.com/get-woke/woke#installation'
  woke --exit-1-on-failure
}

cmd_check_typescript_compatibility () {
  yarn build
  cd test/app
  rm -rf node_modules
  yarn
  check_typescript_3_compatibility || fail 'typescript@3.8.2 compatibility broken'
  check_typescript_latest_compatibility || fail 'typescript@latest compatibility broken'
}

check_typescript_3_compatibility () {
  yarn compat:tsc
}

check_typescript_latest_compatibility () {
  # Add typescript options only supported in newer versions
  perl -i -l -p -e 'print "\"exactOptionalPropertyTypes\": true," if $. == 3' tsconfig.json

  yarn add --dev typescript@latest
  local succeeded=true
  if ! yarn compat:tsc; then
    succeeded=false
  fi

  # Revert all changes
  git checkout .

  $succeeded
}

cmd_check_server_side_rendering_compatibility () {
  yarn build
  cd test/app
  rm -rf node_modules
  yarn
  yarn compat:ssr || fail 'server side rendering compatibility broken'
}

fail () {
  echo
  echo "‚ùå ${1}"
  echo

  exit 1
}

main "$@"
