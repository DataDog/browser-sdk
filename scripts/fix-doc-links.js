#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const { globSync } = require('glob')

// Replace markdown links [text](url) with HTML <a href="url">text</a>
function convertLinks(markdown) {
  return markdown.replace(/\[([^\]]+)]\(([^)]+)\)/g, (_match, text, url) => {
    let newUrl = url
    if (url.endsWith('.md')) {
      newUrl = url.replace(/\.md$/, '.html')
    }
    return `<a href="${newUrl}">${text}</a>`
  })
}

// Fix markdown formatting issues and add modern styling
function fixFormatting(markdown) {
  let content = markdown

  // Remove underscores around (Optional)
  content = content.replace(/_\(Optional\)_/g, '(Optional)')

  // Fix escaped links back to proper HTML
  content = content.replace(/\\<a href="([^"]+)"[^>]*>([^<]+)\\<\/a>/g, '<a href="$1">$2</a>')

  // Remove inappropriate backslashes around text
  content = content.replace(/\\(\[Internal API\])/g, '$1')
  content = content.replace(/\\(\[k: string\])/g, '$1')
  content = content.replace(/\\(\[)/g, '[')
  content = content.replace(/\\(\])/g, ']')
  content = content.replace(/\\(\{)/g, '{')
  content = content.replace(/\\(\})/g, '}')

  // Fix escaped characters in table cells and code
  content = content.replace(/\\\|/g, '|')
  content = content.replace(/\\\//g, '/')

  // Fix specific problematic text patterns like "User session\"
  content = content.replace(/([A-Za-z\s]+)\\"/g, '$1"')
  content = content.replace(/\\"([A-Za-z\s]+)/g, '"$1')

  // Improve readability of array notation
  content = content.replace(/\\\[\\\]/g, '[]')

  // Add modern CSS styling at the beginning of the document
  if (!content.includes('<style>')) {
    const cssStyles = `<style>
body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
  line-height: 1.6;
  color: #333;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f8f9fa;
}

h1, h2, h3, h4, h5, h6 {
  color: #2c3e50;
  font-weight: 600;
  margin-top: 2em;
  margin-bottom: 0.5em;
}

h1 {
  border-bottom: 2px solid #632ca6;
  padding-bottom: 0.5em;
  color: #632ca6;
}

h2 {
  border-bottom: 1px solid #e1e4e8;
  padding-bottom: 0.3em;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin: 1em 0;
  background-color: white;
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

thead {
  background-color: #632ca6;
  color: white;
}

th, td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #e1e4e8;
}

th {
  font-weight: 600;
  font-size: 0.9em;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

tbody tr:hover {
  background-color: #f8f9fa;
}

code {
  background-color: #f1f3f4;
  padding: 2px 6px;
  border-radius: 3px;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
  font-size: 0.9em;
  color: #d73a49;
}

pre {
  background-color: #f6f8fa;
  border: 1px solid #e1e4e8;
  border-radius: 6px;
  padding: 16px;
  overflow-x: auto;
  margin: 1em 0;
}

a {
  color: #632ca6;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

table a {
  font-weight: 500;
  padding: 4px 8px;
  background-color: #f1f3f4;
  border-radius: 4px;
  transition: background-color 0.2s;
}

table a:hover {
  background-color: #e1e4e8;
  text-decoration: none;
}

.breadcrumb a {
  color: #632ca6;
  font-size: 0.9em;
}
</style>

`

    // Insert CSS at the beginning of the document after the comment
    if (content.includes('<!-- Do not edit this file')) {
      content = content.replace(/<!-- Do not edit this file[^>]*-->/, `$&\n\n${cssStyles}`)
    } else {
      content = cssStyles + content
    }
  }

  return content
}

function runMain() {
  const docsDir = path.join(__dirname, '..', 'docs')
  const files = globSync(`${docsDir}/**/*.md`, { nodir: true })
  let processedFiles = 0

  files.forEach((file) => {
    const content = fs.readFileSync(file, 'utf8')
    let transformed = convertLinks(content)
    transformed = fixFormatting(transformed)
    if (content !== transformed) {
      fs.writeFileSync(file, transformed, 'utf8')
      processedFiles++
    }
  })

  // Create modern CSS file
  const cssContent = `/* Modern documentation styling */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
  line-height: 1.6;
  color: #333;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  min-height: 100vh;
}

h1, h2, h3, h4, h5, h6 {
  color: #2c3e50;
  font-weight: 600;
  margin-top: 2em;
  margin-bottom: 0.5em;
}

h1 {
  border-bottom: 2px solid #632ca6;
  padding-bottom: 0.5em;
  color: #632ca6;
}

h2 {
  border-bottom: 1px solid #e1e4e8;
  padding-bottom: 0.3em;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin: 1em 0;
  background-color: white;
  border-radius: 6px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

thead {
  background-color: #632ca6;
  color: white;
}

th, td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #e1e4e8;
}

th {
  font-weight: 600;
  font-size: 0.9em;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

tbody tr:hover {
  background-color: #f8f9fa;
}

code {
  background-color: #f1f3f4;
  padding: 2px 6px;
  border-radius: 3px;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
  font-size: 0.9em;
  color: #d73a49;
}

pre {
  background-color: #f6f8fa;
  border: 1px solid #e1e4e8;
  border-radius: 6px;
  padding: 16px;
  overflow-x: auto;
  margin: 1em 0;
}

a {
  color: #632ca6;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

table a {
  font-weight: 500;
  padding: 4px 8px;
  background-color: #f1f3f4;
  border-radius: 4px;
  transition: background-color 0.2s;
}

table a:hover {
  background-color: #e1e4e8;
  text-decoration: none;
}

@media (max-width: 768px) {
  body {
    padding: 10px;
  }
  
  table {
    font-size: 0.9em;
  }
  
  th, td {
    padding: 8px;
  }
}
`

  const cssPath = path.join(docsDir, 'style.css')
  fs.writeFileSync(cssPath, cssContent)

  console.log(
    `Processed ${processedFiles} markdown files, converted markdown links to HTML <a> tags and added modern styling.`
  )
  console.log('Created modern CSS styling file: docs/style.css')
}

runMain()
